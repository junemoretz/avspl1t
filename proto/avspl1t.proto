syntax = "proto3";

import "google/protobuf/timestamp.proto";

package com.avspl1t;

// File Storage
message S3Credentials {
  string access_key_id = 1;
  string secret_access_key = 2;
  string region = 3;
  string endpoint = 4;
}

message S3File {
  string bucket = 1;
  string path = 2;
  S3Credentials credentials = 3;
}

message S3Folder {
  string bucket = 1;
  string path = 2;
  S3Credentials credentials = 3;
}

message FSFile { string path = 1; }

message FSFolder { string path = 1; }

message File {
  oneof file {
    S3File s3file = 1;
    FSFile fsfile = 2;
  }
}

message Folder {
  oneof folder {
    S3Folder s3folder = 1;
    FSFolder fsfolder = 2;
  }
}

// Jobs
message AV1EncodeJob {
  File input_file = 1;
  Folder working_directory = 2;
  Folder output_directory = 3;
  int32 seconds_per_segment = 4;
  int32 crf = 5;
}

message JobDetails {
  oneof job { AV1EncodeJob av1_encode_job = 1; }
}

message Job {
  string id = 1;
  bool finished = 2;
  bool failed = 3;
  int32 percent_complete = 4;
  File generated_manifest = 5;
  JobDetails job_details = 6;
  google.protobuf.Timestamp created_at = 7;
}

message JobId { string id = 1; }

// Tasks
message SplitVideoTask {
  File input_file = 1;
  Folder output_directory = 2;
  int32 seconds_per_segment = 3;
}

message SplitVideoFinishMessage { repeated File generated_files = 1; }

message EncodeVideoTask {
  File input_file = 1;
  Folder output_directory = 2;
  int32 crf = 3;
}

message EncodeVideoFinishMessage { File generated_file = 1; }

message GenerateManifestTask {
  repeated File files = 1;
  Folder output_directory = 2;
}

message GenerateManifestFinishMessage { File generated_file = 1; }

message Task {
  string id = 1;
  oneof task {
    SplitVideoTask split_video_task = 2;
    EncodeVideoTask encode_video_task = 3;
    GenerateManifestTask generate_manifest_task = 4;
  }
  google.protobuf.Timestamp created_at = 5;
}

message GetTaskMessage { string worker_id = 1; }

message HeartbeatMessage {
  string worker_id = 1;
  string task_id = 2;
}

message FinishTaskMessage {
  string worker_id = 1;
  string task_id = 2;
  bool succeeded = 3;
  oneof additional_details {
    SplitVideoFinishMessage split_video_finish_message = 4;
    EncodeVideoFinishMessage encode_video_finish_message = 5;
    GenerateManifestFinishMessage generate_manifest_finish_message = 6;
  }
}

message Empty {}

service CoordinatorService {
  rpc SubmitJob(JobDetails) returns (JobId); // returns job ID
  rpc GetJob(JobId) returns (Job);
  rpc GetTask(GetTaskMessage) returns (Task);
  rpc Heartbeat(HeartbeatMessage) returns (Empty);
  rpc FinishTask(FinishTaskMessage) returns (Empty);
}